aspect PASTA {
  String Program.generateMagicProblemString(String type, Problem p) {
    int col = p.column;
    if (col == -1) {
      col = 0;
    }
    int packedStart = (p.line << 12) + col;

    int packedEnd;
    if (p.endLine == -1) {
      packedEnd = ((p.line + 1) << 12) - 1;
    } else {
      int endCol = p.endColumn;
      if (endCol == -1) {
        endCol = 0xFFF;
      }
      packedEnd = ((p.endLine << 12) + endCol);
    }
    System.out.printf("%s@%d;%d;%s\n", type, packedStart, packedEnd, p.message);
    return String.format("[%d:%d..%d:%d]: %s", p.line, p.column, p.endLine,
                         p.endColumn, p.message);
  }

  syn java.util.List<String> Program.showProblems() {
    java.util.List<String> ret = new java.util.ArrayList<>();
    for (CompilationUnit unit : getCompilationUnits()) {
      for (Problem p : unit.errors()) {
        ret.add(generateMagicProblemString("ERR", p));
      }
      for (Problem p : unit.warnings()) {
        ret.add(generateMagicProblemString("WARN", p));
      }
    }
    return ret;
  }

public
  java.util.List<Diagnostic> Program.showCFG() {
    java.util.List<Diagnostic> ret = new java.util.ArrayList<>();
    for (CompilationUnit unit : getCompilationUnitList()) {
      for (CFGRoot t : unit.CFGRoots()) {
        ASTNode node = (ASTNode)t;
        traverseCFG(t.entry(), new HashSet<CFGNode>(), ret);
      }
    }
    return ret;
  }

public
  java.util.List<Diagnostic> MethodDecl.showCFG() {
    java.util.List<Diagnostic> ret = new java.util.ArrayList<>();
    traverseCFG(entry(), new HashSet<CFGNode>(), ret);
    return ret;
  }
public
  void ASTNode.traverseCFG(CFGNode t, Set<CFGNode> nodes,
                           java.util.List<Diagnostic> ret) {
    if (nodes.contains(t))
      return;
    nodes.add(t);
    ASTNode node1 = (ASTNode)t;
    for (CFGNode n : t.succ()) {
      ASTNode node2 = (ASTNode)n;
      Random rand = new Random(node1.getStart());

      final int[] components =
          new int[]{10 + rand.nextInt(6), rand.nextInt(16), rand.nextInt(6)};

      final int off = rand.nextInt(3);
      final int r = components[off % 3];
      final int g = components[(off + 1) % 3];
      final int b = components[(off + 2) % 3];
      final int col = (r << 12) + (g << 8) + (b << 4) + 0x6;
      final String colStr = String.format("#%04x", col);

      ret.add(new Diagnostic(java.util.Arrays.asList(),
                             String.format("LINE-PA@%d;%d;%s", node1.getStart(),
                                           node2.getStart(), colStr)));
      traverseCFG(n, nodes, ret);
    }
  }

  class Diagnostic {
    Object humanReadable;
    String diagnostic;

  public
    Diagnostic(Object humanReadable, String diagnostic) {
      this.humanReadable = humanReadable;
      this.diagnostic = diagnostic;
    }

  public
    Object cpr_getOutput() { return humanReadable; }
  public
    String cpr_getDiagnostic() { return diagnostic; }

    @Override public String toString() {
      return humanReadable + "";
    }

  public
    boolean equals(Object other) {
      if (!(other instanceof Diagnostic)) {
        return false;
      }
      Diagnostic o = (Diagnostic)other;
      return humanReadable.equals(o.humanReadable) &&
             diagnostic.equals(o.diagnostic);
    }
  }
}