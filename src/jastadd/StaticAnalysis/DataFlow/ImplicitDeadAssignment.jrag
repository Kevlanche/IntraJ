aspect ImplicitDeadAssignment {

  coll Set<CFGNode> CFGNode.daaAllUses()[new HashSet<>()] with add;

  VarAccess contributes enclosingAssignment() when enclosingAssignment() !=null   to CFGNode.daaAllUses() for each myUses();

  syn Set<CFGNode> VarAccess.myUses() {
    Set<CFGNode> res = new HashSet<CFGNode>();
    for (CFGNode e : RDin()) {
      if (e.getVarDecl() == decl())
        res.add(e);
    }
    return res;
  }

  inh CFGNode VarAccess.enclosingAssignment();
  eq AssignExpr.getSource().enclosingAssignment() = this;
  eq UnaryIncDec.getChild().enclosingAssignment() = this;
  eq VariableDeclarator.getInit().enclosingAssignment() = this;
  eq Program.getChild().enclosingAssignment() = null;

  syn boolean CFGNode.isImplicitlyDead() circular[true] {
    if (daaAllUses().isEmpty() || this.DAA_isDeadAssign())
      return false;

    for (CFGNode candidate : daaAllUses()) {
      if (candidate != this && !candidate.DAA_isDeadAssign() &&
          !candidate.isImplicitlyDead()) {
        return false;
      }
    }
    return true;
  }

  

   AssignExpr contributes warning(
       getCompilationUnit().pathName(),
       "Assignment to '" + getDest().varDecl().name() +
           "' is implicitly dead: only consumed by assignments that are themselves dead.",
       Analysis.AvailableAnalysis.IMPDAA, null, null) when
   isImplicitlyDead() to CompilationUnit.IMPDAA();

   VariableDeclarator contributes warning(
       getCompilationUnit().pathName(),
       "Assignment to '" + singletonValue().name() +
           "' is implicitly dead: only consumed by assignments that are themselves dead.",
       Analysis.AvailableAnalysis.IMPDAA, null, null) when
   isImplicitlyDead() to CompilationUnit.IMPDAA();

   UnaryIncDec contributes warning(
       getCompilationUnit().pathName(),
       "Assignment to '" + getOperand().varDecl().name() +
           "' is implicitly dead: only consumed by assignments that are themselves dead.",
       Analysis.AvailableAnalysis.IMPDAA, null, null) when
   isImplicitlyDead() to CompilationUnit.IMPDAA();
}